---
// üìÅ src/pages/auth/login.astro
import LayoutAuth from '@/layouts/LayoutAuth.astro';
import { validateSession } from '@/lib/auth-utils';
import logoStore from '@/assets/logo.svg';
// Redirigir si ya est√° autenticado
const { user } = await validateSession(Astro.cookies);
if (user) {
  const redirectTo = user.role === 'admin' ? '/admin/dashboard' : '/cashier/dashboard';
  return Astro.redirect(redirectTo);
}

const returnTo = Astro.url.searchParams.get('returnTo') || '/dashboard';
---

<LayoutAuth title="Login - POS System">
  <div class="min-h-screen max-h-screen flex items-center  justify-center relative ">
    <img id="background" src={logoStore.src} alt="" fetchpriority="high" />
    <div class="ui-card box w-sm z-10">
      <div class="flex justify-center items-center flex-col gap-6">
        <div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900 uppercase">
            Iniciar sesi√≥n
          </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
              Introduzca sus credenciales para acceder al sistema
            </p>
        </div>
        <img src={logoStore.src} width="160" height="73" alt="Astro Homepage" />
      </div>
       <form class="mt-8 space-y-6" id="loginForm">
      <input type="hidden" name="returnTo" value={returnTo} />
      <div id="errorMessage" class="app-alert-error hidden text-center"></div>
      <div id="successMessage" class="hidden mt-3 text-center text-sm text-green-600"></div>
      <div class="rounded-md shadow-sm space-y-3">
        <div>
          <label for="username" class="sr-only">Username</label>
          <input
            id="username"
            name="username"
            type="text"
            autocomplete="username"
            required
            class="app-input w-full"
            placeholder="Username"
          />
        </div>
        <div>
          <label for="password" class="sr-only">Password</label>
          <input
            id="password"
            name="password"
            type="password"
            autocomplete="current-password"
            required
            class="app-input w-full"
            placeholder="Password"
          />
        </div>
      </div>

      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <input
            id="remember-me"
            name="remember-me"
            type="checkbox"
            class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
          />
          <label for="remember-me" class="ml-2 block text-sm text-gray-900">
            Remember me
          </label>
        </div>
      </div>

      <div>
        <button
          type="submit"
          class="group relative w-full flex justify-center   app-btn-primary"
          id="submitButton"
        >
          <span class="absolute left-0 inset-y-0 flex items-center pl-3">
            <svg class="h-5 w-5 text-indigo-500 group-hover:text-indigo-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v7a2 2 0 01-2 2H5a2 2 0 01-2-2v-7a2 2 0 012-2z" clip-rule="evenodd" />
            </svg>
          </span>
          Sign in
        </button>
      </div>

      
    </form>
    </div>
  </div>

</LayoutAuth>
<style>
	#background {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		filter: blur(15px);
	}

	
</style>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('loginForm') as HTMLFormElement;
      const submitButton = document.getElementById('submitButton') as HTMLButtonElement;
      const errorMessage = document.getElementById('errorMessage') as HTMLDivElement;
      const successMessage = document.getElementById('successMessage') as HTMLDivElement;

      function showError(message: string) {
        errorMessage.textContent = message;
        errorMessage.classList.remove('hidden');
        successMessage.classList.add('hidden');
      }

      function showSuccess(message: string) {
        successMessage.textContent = message;
        successMessage.classList.remove('hidden');
        errorMessage.classList.add('hidden');
      }

      function hideMessages() {
        errorMessage.classList.add('hidden');
        successMessage.classList.add('hidden');
      }

      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        hideMessages();

        const formData = new FormData(form);
        const username = formData.get('username') as string;
        const password = formData.get('password') as string;
        const rememberMe = formData.get('remember-me') === 'on';

        if (!username || !password) {
          showError('Please fill in all fields');
          return;
        }

        submitButton.disabled = true;
        submitButton.textContent = 'Signing in...';

        try {
          const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              username,
              password,
              rememberMe,
            }),
          });

          const data = await response.json();

          if (data.success) {
            showSuccess('Login successful! Redirecting...');
            setTimeout(() => {
              window.location.href = data.redirectTo || '/dashboard';
            }, 1000);
          } else {
            showError(data.message || 'Credenciales Incorectas');
          }
        } catch (error) {
          console.error('Login error:', error);
          showError('Network error. Please try again.');
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = 'Sign in';
        }
      });
    });
  </script>